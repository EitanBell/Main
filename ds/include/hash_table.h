/**************************************
*				   					  *
*	Developer: Eitan Bellaiche        *	 
*	Reviewer: Gal	                  *
*	Date: 05/02/23	                  *
*	Subject: Hash Table 		 	  *
*				                	  *
**************************************/

#ifndef __HASH_H__
#define __HASH_H__

/*------------------------------------------------------------------------------
General Description
	A data strcuture that maps key-value pairs.
	The mapping allows to insert, find and remove data in low time complexity.
	This implementation does not optimize the time complexity of scenarios where 
	the same index is generated from two different keys.

Attributes
	Mapping, Key-Value Pair
Main Functions
	Insert, Find, Remove
Other Functions
	Create, Destroy, ForEach, Size, IsEmpty
------------------------------------------------------------------------------*/

#include <stddef.h>		/* size_t */

/*------------------------------------------------------------------------------
Description
	A function that defines an action to be done to the data in the hash table.
Parameters
	'item' - An item in the hash table.
	'param' - A parameter used by the function.
Return Value:
	0 - SUCCESS.
	Otherwise - FAILURE.
NOTE!
	A callback function that changes the key of an element will
	affect the operation of the hash table and lead to undefined behavior.
------------------------------------------------------------------------------*/
typedef int (*hash_callback_t)(void *item, void *param);

/*------------------------------------------------------------------------------
Description
	A function that creates an index associated with a given key for the hash
	table. This implementation does not optimize the time complexity of
	scenarios where the same index is generated from two different keys.
Parameters
	'key' - The key for the index to be generated from.
Return Value
	An index.
Comments
	A generated index larger than 'table_size' (see HashCreate) will lead
	to undefined behavior.
------------------------------------------------------------------------------*/
typedef size_t (*hash_func_t)(const void *key);

/*------------------------------------------------------------------------------
Description
	A function to check if two keys are equal.
Return Value
	1 - True
	0 - False
------------------------------------------------------------------------------*/
typedef int (*hash_is_match_t)(const void *key1, const void *key2);

/*------------------------------------------------------------------------------
Description
	A function to extract a key from an item.
Return Value
	A key.
------------------------------------------------------------------------------*/
typedef void *(*hash_get_key_t)(const void *item);

/*------------------------------------------------------------------------------
Description
	A handle for a hash table, created by HashCreate.
------------------------------------------------------------------------------*/	
typedef struct hash hash_t; 

/*   Function Declarations   */

/*------------------------------------------------------------------------------
Description
	Create a handle for a hash table of given size.
Parameters
	'GetKey' - A function to extract a key from an item.
	'IsMatch' - A function to check if two keys are equal.
	'hash_func' - A function to generate an index from a key.
	'table_size' - The number of indexes the table should hold.
Return Value
	On SUCCESS - A handle to the hash table.
	On FAILURE - NULL.
Comments
	The size of the table should be enough to hold all indexes generated by the
	hash function.
Complexity
	Time: O(n) / Space: O(n)
------------------------------------------------------------------------------*/
hash_t *HashCreate(hash_get_key_t GetKey, hash_is_match_t IsMatch, 
								      hash_func_t hash_func, size_t table_size);

/*------------------------------------------------------------------------------
Description
	Destroy all resources taken by the hash table.
Parameters
	'hash' - The hash table to be destroyed.
Return Value
	NO RETURN VALUE.
Complexity
	Time: O(n) / Space: O(1)
------------------------------------------------------------------------------*/
void HashDestroy(hash_t *hash);

/*------------------------------------------------------------------------------
Description
	Insert a new value to the hash table.
Parameters
	'hash' - A hash table.
	'item' - The item to be inserted.
Return Value
	On SUCCESS - 0.
	On FAILURE - Nonzero value.
Comments
	If an item's key is not unique, it may cause undefined behaviour.
Complexity
	Time: O(1) / Space: O(1)
------------------------------------------------------------------------------*/
int HashInsert(hash_t *hash, void *item); 

/*------------------------------------------------------------------------------
Description
	Remove an item with given key from the hash table.
Parameters
	'hash' - A hash table.
	'key' - The key of the item to be removed.
Return Value
	NO RETURN VALUE.
	Comments
Complexity
	Time: Avg - O(1), Worst - O(n) / Space: O(1)
------------------------------------------------------------------------------*/
void HashRemove(hash_t *hash, const void *key);

/*------------------------------------------------------------------------------
Description
	Find an item with given key in the hash table.
Parameters
	'hash' - A hash table.
	'key' - The key of the item to be found.
Return Value
	Item exists in the hash table - The item's data.
	Otherwise - NULL.
Complexity
	Time: Avg - O(1), Worst - O(n) / Space: O(1)
------------------------------------------------------------------------------*/
void *HashFind(const hash_t *hash, const void *key);

/*------------------------------------------------------------------------------
Description
	Perform the operation defined by 'callback' for each value in the hash table.
Parameters
	'hash' - A hash table.
	'callback' - A function that defines the operation to be performed.
	'param' - A parameter used by 'callback'.
Return Value
	The function's exit status.
Comments
	In the case that one of the operations fails, the function stops
	and the exit status will be sent. No further operations will be performed.
Complexity
	Time: O(n) / Space: O(1)
------------------------------------------------------------------------------*/
int HashForeach(hash_t *hash, hash_callback_t callback, void *param);

/*------------------------------------------------------------------------------
Description
	Return the number of values present in the hash table.
Parameters
	'hash' - A hash table.
Return Value
	THe number of values in the hash table.
Complexity
	Time: O(n) / Space: O(1)
------------------------------------------------------------------------------*/
size_t HashSize(const hash_t *hash);

/*------------------------------------------------------------------------------
Description
	Check if the hash table is empty.
Parameters
	'hash' - A hash table.
Return Value
	1 - TRUE.
	0 - FALSE.
Complexity
	Time: O(table_size) / Space: O(1)
------------------------------------------------------------------------------*/
int HashIsEmpty(const hash_t *hash);

#endif /* __HASH_H__ */

